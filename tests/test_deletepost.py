# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestDeletepost():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_deletepost(self):
    self.driver.get("https://reunion.azurewebsites.net/")
    self.driver.set_window_size(1524, 822)
    self.driver.find_element(By.ID, "email_login").click()
    self.driver.find_element(By.ID, "email_login").send_keys("super@gmail.com")
    self.driver.find_element(By.ID, "password_login").click()
    self.driver.find_element(By.ID, "password_login").send_keys("123")
    self.driver.find_element(By.ID, "log").click()
    self.driver.find_element(By.CSS_SELECTOR, ".menu-item:nth-child(3) > h3").click()
    self.driver.find_element(By.CSS_SELECTOR, ".feed:nth-child(1) h3").click()
    self.driver.find_element(By.CSS_SELECTOR, ".feed:nth-child(1) > .head").click()
    self.vars["posttimestamp"] = self.driver.find_element(By.CSS_SELECTOR, ".feed:nth-child(1) small").text
    self.driver.find_element(By.CSS_SELECTOR, ".feed:nth-child(1) .delete-post path").click()
    self.driver.find_element(By.ID, "confirm-delete").click()
    
    # Wait for the deletion to be processed and then refresh to ensure it's gone
    time.sleep(3)  # Adjust based on observed behavior, could be replaced with more sophisticated wait
    self.driver.refresh()  # Changed from self.driver.refresh() to driver.refresh()

    # Check that the timestamp is no longer present
    posts = self.driver.find_elements(By.CSS_SELECTOR, ".feed .info small")  # Changed from self.driver to driver
    timestamps = [post.text for post in posts]
    assert self.vars["posttimestamp"] not in timestamps, "Timestamp still present on the page after deletion."
  
